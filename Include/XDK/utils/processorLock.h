/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_XDK_UTILS_PROCESSORLOCK_H
#define __TBA_XDK_UTILS_PROCESSORLOCK_H

/*
 * ProcessorLock.h
 *
 * Lock the current processor from context-switch/interrupts
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/os/lockable.h"

// Forward declaration
class cInterruptSpinLock;

/*
 * Locks the current processor from context-switch/interrupts
 * Raise IRQL to HIGH_LEVEL and set IRQL into TBA_INTERRUPT_IRQL
 *
 * NOTE: This code is NOT design for dual-processor lock! Only to protect the
 *       current running thread in the current processor.
 *
 * NOTE: It's safe to call this function when a lock was acquire.
 *       The first executed ProcessorLock for a processor will disable
 *       interrupts. The second execution, will not affect the IF.
 */
class cProcessorLock : public cLockableObject {
public:
    /*
     * Default constructor
     */
    cProcessorLock();

    // Copy-constructor and operator = will auto-generated by the compiler

    /*
     * See cLockable::lock()
     */
    virtual void lock();

    /*
     * See cLockable::unlock()
     */
    virtual void unlock();

    /*
     * Clear the state of the struct.
     *
     * Reset all struct fields regardelss to previous state.
     *
     * PLEASE DON'T USE THIS FUNCTION UNLESS YOU ARE ABSOLUTE SURE OF WHAT YOU
     * ARE DOING!
     */
    void clear();

    /*
     * Return true if the current processor interrupt flag is set (enabled)
     * (No other interrupts allowed)
     *
     * NOTE: This code is still unsafe since there may-be several of running
     *       processors. The entire function must be run from the safe processor
     *       context.
     */
    static bool isInterruptFlagSetEnabled();

private:
    // In debugging mode the interrupt-spin lock might want to access the
    // processor lock for IRQL assertions.
    #ifdef _DEBUG
    friend class cInterruptSpinLock;
    #endif

    // Set to true to indicate whether interrupts where masked or not
    bool m_wasInterruptOff;
    // Set to true if the lock acquire and indicates that the IRQL was raised
    bool m_lockAcquire;
};

#endif // __TBA_XDK_UTILS_PROCESSORLOCK_H

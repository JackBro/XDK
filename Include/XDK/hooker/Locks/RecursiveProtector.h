/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_XDK_HOOKER_LOCKS_RECURSIVEPROTECTOR_H
#define __TBA_XDK_HOOKER_LOCKS_RECURSIVEPROTECTOR_H

/*
 * RecursiveProtector.h
 *
 * A module which prevent a code from running twice in the system.
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/os/mutex.h"
#include "xStl/data/list.h"
#include "xStl/data/smartptr.h"
#include "xStl/utils/callbacker.h"

#ifdef XSTL_NTDDK
    #include "xdk/utils/interruptSpinLock.h"
#endif

/*
 * The module prevent code portion from being called twice. The module support
 * both system-wide lock and thread-based locked.
 */
class RecursiveProtector {
public:
    /*
     * Constructor. Put a locked over a code region. The region is defined using
     * two numbers: id1&id2 which combine a unique ID over the locked region.
     *
     * If the executed code is called twice, e.g. The two IDs already running
     * in the system, the callbackClass will be executed..
     *
     * id1           - The first unique ID
     * id2           - The second unique ID
     * callbackClass - Will be called
     */
    RecursiveProtector(uint id1,
                       uint id2,
                       cCallback& callbackClass);

    /*
     * Destructor. Remove the lock over the code.
     */
    ~RecursiveProtector();

private:
    // Deny copy-constructor and operator =
    RecursiveProtector(const RecursiveProtector& other);
    RecursiveProtector& operator = (const RecursiveProtector& other);

    /*
     * Holds a single locked region.
     */
    class LockRegion {
    public:
        // Ctor. Save IDs and callback functions
        LockRegion(uint id1,
                   uint id2);
        // Copy-constructor and operator = will auto-generated by the compiler
        // Operator == will be used to compare two IDs
        bool operator == (const LockRegion& other);

    private:
        // The unique IDs
        uint m_id1;
        uint m_id2;
    };

    // A pointer to the current
    LockRegion m_region;
    // Holds the status of 'm_region', true means that the m_region is queue
    // inside the list and false means that m_region is not inside the list
    bool m_isRegionLocked;

    /*
     * Return true if the region 'other' is locked in the system.
     * NOTE: This function is not thread-safe!
     */
    bool isRegionLocked(const LockRegion& other);

    // All the locked regions currently locked by this executable.
    static cList<LockRegion> m_lockedRegions;
    // The lockable over the list
    static
    #ifdef XSTL_NTDDK
        cInterruptSpinLock
    #else
        cMutex
    #endif
        m_lockedRegionsLocked;
};

#endif // __TBA_XDK_HOOKER_LOCKS_RECURSIVEPROTECTOR_H
